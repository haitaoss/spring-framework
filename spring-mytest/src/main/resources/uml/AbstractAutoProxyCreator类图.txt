@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

interface BeanPostProcessor << interface >> {
  + postProcessAfterInitialization(Object, String): Object?
}
interface InstantiationAwareBeanPostProcessor << interface >> {
  + postProcessBeforeInstantiation(Class<?>, String): Object?
}
interface SmartInstantiationAwareBeanPostProcessor << interface >> {
  + getEarlyBeanReference(Object, String): Object
}
class AbstractAdvisorAutoProxyCreator {
  # isEligibleAdvisorBean(String): boolean
  + setBeanFactory(BeanFactory): void
  # findAdvisorsThatCanApply(List<Advisor>, Class<?>, String): List<Advisor>
  # sortAdvisors(List<Advisor>): List<Advisor>
  # extendAdvisors(List<Advisor>): void
  # getAdvicesAndAdvisorsForBean(Class<?>, String, TargetSource?): Object[]?
  # initBeanFactory(ConfigurableListableBeanFactory): void
  # findEligibleAdvisors(Class<?>, String): List<Advisor>
  # findCandidateAdvisors(): List<Advisor>
}
class AbstractAutoProxyCreator {
  + setBeanFactory(BeanFactory): void
  + postProcessBeforeInstantiation(Class<?>, String): Object?
  + getEarlyBeanReference(Object, String): Object
  + postProcessAfterInitialization(Object?, String): Object?
  # getCustomTargetSource(Class<?>, String): TargetSource?
  + setApplyCommonInterceptorsFirst(boolean): void
  # customizeProxyFactory(ProxyFactory): void
 # createProxy(Class<?>, String?, Object[]?, TargetSource): Object
 # buildAdvisors(String?, Object[]?): Advisor[]
  # wrapIfNecessary(Object, String, Object): Object
  # isInfrastructureClass(Class<?>): boolean
  # shouldSkip(Class<?>, String): boolean
  # shouldProxyTargetClass(Class<?>, String?): boolean
}
class AnnotationAwareAspectJAutoProxyCreator {
  + setIncludePatterns(List<String>): void
  + setAspectJAdvisorFactory(AspectJAdvisorFactory): void
  # initBeanFactory(ConfigurableListableBeanFactory): void
  # findCandidateAdvisors(): List<Advisor>
  # isInfrastructureClass(Class<?>): boolean
  # isEligibleAspectBean(String): boolean
}
class AspectJAwareAdvisorAutoProxyCreator {
  # shouldSkip(Class<?>, String): boolean
  # sortAdvisors(List<Advisor>): List<Advisor>
  # extendAdvisors(List<Advisor>): void
}
interface BeanFactoryAware << interface >> {
  + setBeanFactory(BeanFactory): void
}

class DefaultAdvisorAutoProxyCreator {
  + isUsePrefix(): boolean
  + setAdvisorBeanNamePrefix(String?): void
  + setBeanName(String): void
  # isEligibleAdvisorBean(String): boolean
  + setUsePrefix(boolean): void
  + getAdvisorBeanNamePrefix(): String?
}
class InfrastructureAdvisorAutoProxyCreator {
  # initBeanFactory(ConfigurableListableBeanFactory): void
  # isEligibleAdvisorBean(String): boolean
}


AbstractAdvisorAutoProxyCreator           -[#000082,plain]-^  AbstractAutoProxyCreator
AbstractAutoProxyCreator                  -[#008200,dashed]-^  BeanFactoryAware
AbstractAutoProxyCreator                  -[#008200,dashed]-^  SmartInstantiationAwareBeanPostProcessor
AnnotationAwareAspectJAutoProxyCreator    -[#000082,plain]-^  AspectJAwareAdvisorAutoProxyCreator
AspectJAwareAdvisorAutoProxyCreator       -[#000082,plain]-^  AbstractAdvisorAutoProxyCreator
DefaultAdvisorAutoProxyCreator            -[#000082,plain]-^  AbstractAdvisorAutoProxyCreator
InfrastructureAdvisorAutoProxyCreator     -[#000082,plain]-^  AbstractAdvisorAutoProxyCreator
InstantiationAwareBeanPostProcessor       -[#008200,plain]-^  BeanPostProcessor
SmartInstantiationAwareBeanPostProcessor  -[#008200,plain]-^  InstantiationAwareBeanPostProcessor
@enduml
