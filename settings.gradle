pluginManagement {
	repositories {
		mavenLocal()
		// 从 https://developer.aliyun.com/mvn/guide 找的
		maven { "central"; url "https://maven.aliyun.com/repository/central"}
		maven { "jcenter"; url "https://maven.aliyun.com/repository/public"}
		maven { "public"; url "https://maven.aliyun.com/repository/public"}
		maven { "google"; url "https://maven.aliyun.com/repository/google"}
		maven { "gradle-plugin"; url "https://maven.aliyun.com/repository/gradle-plugin"}
		maven { "spring"; url "https://maven.aliyun.com/repository/spring"}
		maven { "spring-plugin"; url "https://maven.aliyun.com/repository/spring-plugin"}
		maven { "grails-core"; url "https://maven.aliyun.com/repository/grails-core"}
		maven { "apache snapshots"; url "https://maven.aliyun.com/repository/apache-snapshots"}
		mavenCentral()
	}
}

plugins {
	id "com.gradle.enterprise" version "3.6.1"
	// id "io.spring.ge.conventions" version "0.0.7"
}

dependencyResolutionManagement {
	repositories {
		mavenLocal()
		// 从 https://developer.aliyun.com/mvn/guide 找的
		maven { "central"; url "https://maven.aliyun.com/repository/central"}
		maven { "jcenter"; url "https://maven.aliyun.com/repository/public"}
		maven { "public"; url "https://maven.aliyun.com/repository/public"}
		maven { "google"; url "https://maven.aliyun.com/repository/google"}
		maven { "gradle-plugin"; url "https://maven.aliyun.com/repository/gradle-plugin"}
		maven { "spring"; url "https://maven.aliyun.com/repository/spring"}
		maven { "spring-plugin"; url "https://maven.aliyun.com/repository/spring-plugin"}
		maven { "grails-core"; url "https://maven.aliyun.com/repository/grails-core"}
		maven { "apache snapshots"; url "https://maven.aliyun.com/repository/apache-snapshots"}
		mavenCentral()
	}
}

include "spring-aop"
include "spring-aspects"
include "spring-beans"
include "spring-context"
include "spring-context-indexer"
include "spring-context-support"
include "spring-core"
include "spring-expression"
include "spring-instrument"
include "spring-jcl"
include "spring-jdbc"
include "spring-jms"
include "spring-messaging"
include "spring-orm"
include "spring-oxm"
include "spring-r2dbc"
include "spring-test"
include "spring-tx"
include "spring-web"
include "spring-webflux"
include "spring-webmvc"
include "spring-websocket"
include "framework-bom"
include "integration-tests"

rootProject.name = "spring"
rootProject.children.each {project ->
	project.buildFileName = "${project.name}.gradle"
}

settings.gradle.projectsLoaded {
	gradleEnterprise {
		buildScan {
			File buildDir = settings.gradle.rootProject.getBuildDir()
			buildDir.mkdirs()
			new File(buildDir, "build-scan-uri.txt").text = "(build scan not generated)"
			buildScanPublished { scan ->
				if (buildDir.exists()) {
					new File(buildDir, "build-scan-uri.txt").text = "${scan.buildScanUri}\n"
				}
			}
		}
	}
}
include 'source-note:source-note-spring'
include 'source-note:source-note-springmvc'
include 'source-note:source-note-spring-webflux'
include 'source-note:source-note-spring-test'

